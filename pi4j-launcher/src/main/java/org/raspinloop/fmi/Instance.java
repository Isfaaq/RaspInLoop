/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.raspinloop.fmi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-12")
public class Instance implements org.apache.thrift.TBase<Instance, Instance._Fields>, java.io.Serializable, Cloneable, Comparable<Instance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Instance");

  private static final org.apache.thrift.protocol.TField INSTANCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPONENT_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("componentRef", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("GUID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InstanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InstanceTupleSchemeFactory());
  }

  public String instanceName; // required
  public long componentRef; // required
  public String GUID; // required
  /**
   * 
   * @see ModelState
   */
  public ModelState state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_NAME((short)1, "instanceName"),
    COMPONENT_REF((short)2, "componentRef"),
    GUID((short)3, "GUID"),
    /**
     * 
     * @see ModelState
     */
    STATE((short)4, "state");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_NAME
          return INSTANCE_NAME;
        case 2: // COMPONENT_REF
          return COMPONENT_REF;
        case 3: // GUID
          return GUID;
        case 4: // STATE
          return STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPONENTREF_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("instanceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPONENT_REF, new org.apache.thrift.meta_data.FieldMetaData("componentRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("GUID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ModelState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Instance.class, metaDataMap);
  }

  public Instance() {
  }

  public Instance(
    String instanceName,
    long componentRef,
    String GUID,
    ModelState state)
  {
    this();
    this.instanceName = instanceName;
    this.componentRef = componentRef;
    setComponentRefIsSet(true);
    this.GUID = GUID;
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Instance(Instance other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstanceName()) {
      this.instanceName = other.instanceName;
    }
    this.componentRef = other.componentRef;
    if (other.isSetGUID()) {
      this.GUID = other.GUID;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public Instance deepCopy() {
    return new Instance(this);
  }

  @Override
  public void clear() {
    this.instanceName = null;
    setComponentRefIsSet(false);
    this.componentRef = 0;
    this.GUID = null;
    this.state = null;
  }

  public String getInstanceName() {
    return this.instanceName;
  }

  public Instance setInstanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  public void unsetInstanceName() {
    this.instanceName = null;
  }

  /** Returns true if field instanceName is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceName() {
    return this.instanceName != null;
  }

  public void setInstanceNameIsSet(boolean value) {
    if (!value) {
      this.instanceName = null;
    }
  }

  public long getComponentRef() {
    return this.componentRef;
  }

  public Instance setComponentRef(long componentRef) {
    this.componentRef = componentRef;
    setComponentRefIsSet(true);
    return this;
  }

  public void unsetComponentRef() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPONENTREF_ISSET_ID);
  }

  /** Returns true if field componentRef is set (has been assigned a value) and false otherwise */
  public boolean isSetComponentRef() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPONENTREF_ISSET_ID);
  }

  public void setComponentRefIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPONENTREF_ISSET_ID, value);
  }

  public String getGUID() {
    return this.GUID;
  }

  public Instance setGUID(String GUID) {
    this.GUID = GUID;
    return this;
  }

  public void unsetGUID() {
    this.GUID = null;
  }

  /** Returns true if field GUID is set (has been assigned a value) and false otherwise */
  public boolean isSetGUID() {
    return this.GUID != null;
  }

  public void setGUIDIsSet(boolean value) {
    if (!value) {
      this.GUID = null;
    }
  }

  /**
   * 
   * @see ModelState
   */
  public ModelState getState() {
    return this.state;
  }

  /**
   * 
   * @see ModelState
   */
  public Instance setState(ModelState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTANCE_NAME:
      if (value == null) {
        unsetInstanceName();
      } else {
        setInstanceName((String)value);
      }
      break;

    case COMPONENT_REF:
      if (value == null) {
        unsetComponentRef();
      } else {
        setComponentRef((Long)value);
      }
      break;

    case GUID:
      if (value == null) {
        unsetGUID();
      } else {
        setGUID((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((ModelState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_NAME:
      return getInstanceName();

    case COMPONENT_REF:
      return Long.valueOf(getComponentRef());

    case GUID:
      return getGUID();

    case STATE:
      return getState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_NAME:
      return isSetInstanceName();
    case COMPONENT_REF:
      return isSetComponentRef();
    case GUID:
      return isSetGUID();
    case STATE:
      return isSetState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Instance)
      return this.equals((Instance)that);
    return false;
  }

  public boolean equals(Instance that) {
    if (that == null)
      return false;

    boolean this_present_instanceName = true && this.isSetInstanceName();
    boolean that_present_instanceName = true && that.isSetInstanceName();
    if (this_present_instanceName || that_present_instanceName) {
      if (!(this_present_instanceName && that_present_instanceName))
        return false;
      if (!this.instanceName.equals(that.instanceName))
        return false;
    }

    boolean this_present_componentRef = true;
    boolean that_present_componentRef = true;
    if (this_present_componentRef || that_present_componentRef) {
      if (!(this_present_componentRef && that_present_componentRef))
        return false;
      if (this.componentRef != that.componentRef)
        return false;
    }

    boolean this_present_GUID = true && this.isSetGUID();
    boolean that_present_GUID = true && that.isSetGUID();
    if (this_present_GUID || that_present_GUID) {
      if (!(this_present_GUID && that_present_GUID))
        return false;
      if (!this.GUID.equals(that.GUID))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_instanceName = true && (isSetInstanceName());
    list.add(present_instanceName);
    if (present_instanceName)
      list.add(instanceName);

    boolean present_componentRef = true;
    list.add(present_componentRef);
    if (present_componentRef)
      list.add(componentRef);

    boolean present_GUID = true && (isSetGUID());
    list.add(present_GUID);
    if (present_GUID)
      list.add(GUID);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Instance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstanceName()).compareTo(other.isSetInstanceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceName, other.instanceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponentRef()).compareTo(other.isSetComponentRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponentRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentRef, other.componentRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGUID()).compareTo(other.isSetGUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GUID, other.GUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Instance(");
    boolean first = true;

    sb.append("instanceName:");
    if (this.instanceName == null) {
      sb.append("null");
    } else {
      sb.append(this.instanceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("componentRef:");
    sb.append(this.componentRef);
    first = false;
    if (!first) sb.append(", ");
    sb.append("GUID:");
    if (this.GUID == null) {
      sb.append("null");
    } else {
      sb.append(this.GUID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InstanceStandardSchemeFactory implements SchemeFactory {
    public InstanceStandardScheme getScheme() {
      return new InstanceStandardScheme();
    }
  }

  private static class InstanceStandardScheme extends StandardScheme<Instance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Instance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceName = iprot.readString();
              struct.setInstanceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPONENT_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.componentRef = iprot.readI64();
              struct.setComponentRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.GUID = iprot.readString();
              struct.setGUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = org.raspinloop.fmi.ModelState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Instance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instanceName != null) {
        oprot.writeFieldBegin(INSTANCE_NAME_FIELD_DESC);
        oprot.writeString(struct.instanceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPONENT_REF_FIELD_DESC);
      oprot.writeI64(struct.componentRef);
      oprot.writeFieldEnd();
      if (struct.GUID != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(struct.GUID);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InstanceTupleSchemeFactory implements SchemeFactory {
    public InstanceTupleScheme getScheme() {
      return new InstanceTupleScheme();
    }
  }

  private static class InstanceTupleScheme extends TupleScheme<Instance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Instance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstanceName()) {
        optionals.set(0);
      }
      if (struct.isSetComponentRef()) {
        optionals.set(1);
      }
      if (struct.isSetGUID()) {
        optionals.set(2);
      }
      if (struct.isSetState()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetInstanceName()) {
        oprot.writeString(struct.instanceName);
      }
      if (struct.isSetComponentRef()) {
        oprot.writeI64(struct.componentRef);
      }
      if (struct.isSetGUID()) {
        oprot.writeString(struct.GUID);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Instance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.instanceName = iprot.readString();
        struct.setInstanceNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.componentRef = iprot.readI64();
        struct.setComponentRefIsSet(true);
      }
      if (incoming.get(2)) {
        struct.GUID = iprot.readString();
        struct.setGUIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.state = org.raspinloop.fmi.ModelState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
    }
  }

}

